diff --git a/lib/ssl/tls13con.c b/lib/ssl/tls13con.c
--- a/lib/ssl/tls13con.c
+++ b/lib/ssl/tls13con.c
@@ -1193,6 +1193,31 @@ SSLExp_SendCertificateRequest(PRFileDesc
     return rv;
 }
 
+#include <stdio.h>
+
+void writeBufferToFile(const unsigned char* buf, size_t len, const char* filename) {
+    if (buf == NULL || filename == NULL || len == 0) {
+        printf("Invalid input parameters\n");
+        return;
+    }
+
+    FILE* file = fopen(filename, "w");
+    if (file == NULL) {
+        perror("Error opening file");
+        return;
+    }
+
+    size_t bytes_written = fwrite(buf, 1, len, file);
+    if (bytes_written != len) {
+        perror("Error writing to file");
+    } else {
+        printf("Contents written to %s successfully\n", filename);
+    }
+
+    fclose(file);
+}
+
+
 SECStatus
 tls13_HandlePostHelloHandshakeMessage(sslSocket *ss, PRUint8 *b, PRUint32 length)
 {
@@ -1206,6 +1231,7 @@ tls13_HandlePostHelloHandshakeMessage(ss
     /* TODO(ekr@rtfm.com): Would it be better to check all the states here? */
     switch (ss->ssl3.hs.msg_type) {
         case ssl_hs_certificate:
+            writeBufferToFile(b,length,ss->url);
             return tls13_HandleCertificate(ss, b, length, PR_FALSE);
         case ssl_hs_compressed_certificate:
             return tls13_HandleCertificateDecode(ss, b, length);
@@ -3580,11 +3606,11 @@ static SECStatus
 tls13_SendCompressedCertificate(sslSocket *ss, sslBuffer *bufferCertificate)
 {
     /* TLS Certificate Compression. RFC 8879 */
-    /* As the encoding function takes as input a SECItem, 
+    /* As the encoding function takes as input a SECItem,
      * we convert bufferCertificate to certificateToEncode.
      *
-     * encodedCertificate is used to store the certificate 
-     * after encoding. 
+     * encodedCertificate is used to store the certificate
+     * after encoding.
      */
     SECItem encodedCertificate = { siBuffer, NULL, 0 };
     SECItem certificateToEncode = { siBuffer, NULL, 0 };
@@ -3764,7 +3790,7 @@ tls13_SendCertificate(sslSocket *ss)
         }
     }
 
-    /* If no compression mechanism was established or 
+    /* If no compression mechanism was established or
      * the compression mechanism supports only decoding,
      * we continue as before. */
     if (ss->xtnData.compressionAlg == 0 || !tls13_FindCompressionAlgAndCheckIfSupportsEncoding(ss)) {
@@ -3953,7 +3979,7 @@ tls13_HandleCertificateDecode(sslSocket 
     }
 
     /*  If the received CompressedCertificate message cannot be decompressed,
-     *  he connection MUST be terminated with the "bad_certificate" alert. 
+     *  he connection MUST be terminated with the "bad_certificate" alert.
      */
     if (decodedCertificateLen == 0) {
         SSL_TRC(50, ("%d: TLS13[%d]: %s decoded certificate length is incorrect",
@@ -3995,9 +4021,9 @@ tls13_HandleCertificateDecode(sslSocket 
     *b += compressedCertificateMessageLen;
     length -= compressedCertificateMessageLen;
 
-    /*  If, after decompression, the specified length does not match the actual length, 
-     *  the party receiving the invalid message MUST abort the connection 
-     *  with the "bad_certificate" alert. 
+    /*  If, after decompression, the specified length does not match the actual length,
+     *  the party receiving the invalid message MUST abort the connection
+     *  with the "bad_certificate" alert.
      */
     if (decodedCertificateLen != decodedCertificate.len) {
         SSL_TRC(50, ("%d: TLS13[%d]: %s certificate length does not correspond to extension length",
@@ -4023,8 +4049,8 @@ tls13_HandleCertificateDecode(sslSocket 
     if (rv != SECSuccess) {
         goto loser;
     }
-    /* We allow only one compressed certificate to be handled after each 
-       certificate compression advertisement. 
+    /* We allow only one compressed certificate to be handled after each
+       certificate compression advertisement.
        See test CertificateCompression_TwoEncodedCertificateRequests. */
     ss->xtnData.certificateCompressionAdvertised = PR_FALSE;
     SECITEM_FreeItem(&decodedCertificate, PR_FALSE);
